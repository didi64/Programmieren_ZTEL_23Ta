01 Intro, Docker und Jupyterlab Installieren
02 Syntax und Semantik-Fehler, Variabeln Funktionen, Minipython mit For
03 Basic Types, if-then-else
04 Module While-Loops
05 break und continue, Platzhalterstrings
06 Methods, Listen Listen mit Listen
07 enum, zip, sorted, Files, Listcomp, Sets
08 Dicts, if expressions any, all
09 Dict, Sortieralgos 16.12


10 Repetition. 06.1. Canvas, Callbacks, Widgets 16.12, Automat 9.12
11 Test, 13.1. Klassen, 
12 Callbacks, 20.1
13 Games, Projektarbeit infos, Themen fixieren. 27.1.


14 PA 17.2.
15 PA 24.2
16 PA 3.3
17 Projektvorstellung 10.3.
18 Abschluss/ Feedback Projektarbeiten. 17.3


L08 cards.py. Ignorieren oder loeschen. 
Code geaendert! search replace RANK->IDX 
IDX je kleiner Index, desto schlechter die Karte,
Rank: 2,T,Q,A nicht Rank im Sinne was besser!
Cards.ipynb
cards.py

Cheatsheet: Enthaelt nun das ganzen Pruefungsstoff! (letztes ist richtiges)
            Typo bei Mengen: pop(i=-1) statt pop().
            Die pop Methode von set nimmt im Gegensatz zur pop Methode vonn list
            kein Argument!
Im Detail besprechen!



------------------------------
Moechte mit Exkurs zum Sortieren beginnen.
Moechte einen Kurzen ueberblick ueber Sortieralgorithmen gaben.
Nehmt dies mit: effiziente Sortieralgos sind nicht einfach zu implementieren.

Kleinere Listen zu sortieren mit eigenem sortieralgo zu sortieren ist nicht so schwierig.

Nachtrag:
Iterables_sortieren_A.ipynb, verschiebe nach L09 -> Loesungen 07.

--
items = [('b', 2), ('a', 2), ('c', 3)]

# aufsteigend nach Wert
sorted(items, key=lambda x: x[1], reverse=True)
sorted(items, key=lambda x: -x[1])

# wort/buchstabe als Tiebreaker
sorted(items, key=lambda x: (x[1], x[0]), reverse=True)
sorted(items, key=lambda x: (-x[1], x[0]))

# 2-mal sortieren
items_sorted = sorted(items)
items_sorted
sorted(items_sorted, key=lambda x: x[1], reverse=True)


-> Iterables_sortieren_A.ipynb: verschiebe nach L07/Loesungen 07
----------

sorted: z.B. rang namen beispiel
scrabble tiebreak! sorted lambda x: (-wortwoert, wort) aufsteigend!
neu: iterable_sortieren_A in Loesungen L07 schieben.
sortieren nach wortwert, 

update Iterables_sortieren_A.ipynb, add it to L09 -> LOesungen 07
---------

Sortieralgos/Testing

items = list(range(10))
random.shuffle(items)

-> Sortieralgos_Testing

Intro
insert sort:
Fange mit leerer Liste an.
Fuege jedes Element der zu sortierenden Liste an der richtigen Stelle ein.

bubble sort:
zeige Wiki-Page Animation. nach 1. Durchgang ist
groesstes Element am Schluss, also braucht man nun nur noch die
um 1 verkuerzte Liste zu sortieren!

quicksort: divide and conquer, rekursiv.

---
Kontrollfragen 8
1a,b,c) Dict erstellen, explizit, aus key-value Paaren, mit dict-comp
 list(zip(en, de))
2) Dict umdrehen: a) falls Wert eindeutig, 
                  b,c) haben mehrere Keys den gleichen Wert
                       diese in Liste zusammenfassen
                  setdefault: gibt immer Wert zurueck, setzt Wert nur, falls noch kein Wert
                              Wert wird in keinem Fall ueberschreiben
3) dict sortieren: 
    nach keys, nach values!
    braucht man immer wieder
    auch moeglich: 
    sorted(en_de.items(), key=lambda x: x[::-1])

4) peek(d, n)
Idee einfach
  keys = list(d)[:2]
  {k: d[k] for k in keys}

brauche hier die Funktion reversed()
it = en_de.items()
it

it=reversed(it)
it

tuple(It)

5) count_dict!
6) occurence_dict!
7) wuerfeln: [random.randint(1, 6) for _ in range(n)]!
8) is_straight: nur 2 Moeglichkeiten: 1,2,3,4,5 oder 2,3,4,5,6
                5 versch. Zahlen, 6 oder 1 fehlt.
9) Wurfbild
10) Zufallsexperiment!
    if-else AUsdruck verwendet
---------------
Sprachdetektion
----------------------
Idee Hauefigkeitsdict:

cd = {'A': 13, 'B': 5}
tot = sum(cd.values())
fd = {k: v/tot for k, v in cd.items()}

sum(fd.values())

discuss: english_or_german(text)
---

Fallunterscheidung mit Dict
type_fun dict. ev global:
falls neuer type hinzukommt, neue fun in dict hinzufuegen.
if-elif-else Block wird reduziert auf einen dict-lookup!!
    
----
Ein- und und auspacken, benamste Platzhalter.

args = (1, 2, 3)
'x={}, y={}, z={}'.format(*args)


kwargs = {'sep': '; ', 'end': '\n\n'}
print(*args, **kwargs)

print(1, 2, 3, sep='; ', end='\n\n')

kwargs = {'width': 200, 'height': 100}
'Breite={width}, Hoehe={height}'.format(**kwargs)


Dictionaries_ein_und_auspacken.ipynb
---
Cheatsheet (ganzer Stoff): gemeinsam durchgehen.
  Ueberblick Typen, Funktionen, Methoden
      Ihr wisse das es diese Funktione/Methoden gibt,
      Mit Hilfe die Jupyterlab (shift-tab) bereitstellt, solltet
      zu jeder dieser Funktionen ein einfaches Bsp machen koennen,
      das illustiert, was Fkt tut.
  Funktionen auf Iterables
  Platzhalterstr.
  args und kwargs einpacken und auspacken
  Funktionen definieren,
  positional Arguments, kwargs, default Argumente
  For, while-Loops, break, continue, else
  Textfiles
  input
--
notebookfinder (finde Beispiele)
muss suche! klicken
---

Uebungen:
--------
Handytastatur.ipynb       
Ortschaften.ipynb  
Primzahlen.ipynb          
Zufallsexp_mit_Wuerfel.ipynb

Shorts_nach_Thema        
  list_questions.ipynb    
  loops.ipynb   
  set_questions.ipynb    
  str_questions.ipynb

WORDS_CH5_umlautfrei.txt


empfehle
- Ortschaften
- wuerfle

- Handytastatur etwas groessereschwierigere Aufgabe

shorts:
- erklaere anhand von str_short, test zu jeder Funktion.




