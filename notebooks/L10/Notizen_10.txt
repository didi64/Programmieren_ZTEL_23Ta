Steuerung von Automaten, bez. Steuerung eines Geraetes mit einem Automaten.

Beispiel 3d-Drucker. 
Der Drucker wird mittels sog. g-Codes gesteuert.
Im Prinzip koennte man diese g-Codes direkt selber eingeben.
Hat jedoch Software, die zu einem 3d-Model eines Objekts das entsprechende g-Code Programm generiert.

Modelliert Automat als abstrakte Maschine.
Automat kann nur einzelne Symbole lesen,
ev. Zustand wechseln und Symbol ausgeben.

Automat operiert in Umgebung, koennen Ausgabezeichen als Befehl interpretieren,
der an das zu steuernde Geraet weitergeleitet wird.


01 Intro, Docker und Jupyterlab Installieren
02 Syntax und Semantik-Fehler, Variabeln Funktionen, Minipython mit For
03 Basic Types, if-then-else
04 Module While-Loops
05 break und continue, Platzhalterstrings
06 Methods, Listen Listen mit Listen
07 enum, zip, sorted, Files, Listcomp, Sets
08 Dicts, if expressions any, all
09 Dict, Sortieralgos 16.12


10 Repetition. 06.1. Automat 9.12
11 Test, 13.1. Klassen, 
12 Callbacks, 20.1
13 Games, Projektarbeit infos, Themen fixieren. 27.1.


14 PA 17.2.
15 PA 24.2
16 PA 3.3
17 Projektvorstellung 10.3.
18 Abschluss/ Feedback Projektarbeiten. 17.3

-
Gutes neues Jahr!

Pruefungsstoff durchgehen, Fragen zu den Uebungen aus Lektion
beantworten und Pruefungsablauf testen.
----
Stoff auf Cheatsheet, nochmals ein paar Updates:
-range, Slicenotation, round, str.ljust, str.rjust

# beachte
round(0.5)  # ist integer
round(0.5, 0)  # ist float
---
# str ljust ist neu!

s = 'foo'
s.ljust(10)  # linksbuendig, Laenge mind. 10
s.rjust(10)  # rechtsbuendig, Laenge mind. 10

gehe nicht im Detail durch.
Hilfstext sollte euch genug Info liefern

oder sucht passendes Notebook mit %run -m nbf
  range
  dict.get
  dict.setdefault
  
--
--
int: // und %
2 / 1 ?
3 // 2 ?
10 % 3 ?

Typisches Beispiel: 
Feld mit 8 Spalten und 5 Zeilen

    0  1  2  3  4  5  6  7
    ------------------------
0|  0  1  2  3  4  5  6  7
1|  8  9 10 11 12 13 14 15
2| 16 17 18 19 20 21 22 23
3| 24 25 26 27 28 29 30 31
4| 32 33 34 35 36 37 38 39
 
Feldnummer -> x,y-Koordinaten

Zuviel orange,rot: 
File speichern ctr-s, schliessen und wieder oeffnen

SHOW?: transpose a table:
       list(zip(*table))
--
Teste_Pruefungsablauf: Ablauf und Abgabe
lies 1. Paragraph dann:
- help(solutions)
- solutions.ceil(3.3)
- Kurzaufgaben:
  1. kein .str.index oder str.find
     Mit Schleife: i von 0 bis Laenge von s laufen lassen, testen ob i-tes Zeichen Space
  2. kein str.replace, 
     muss string auseinandernehmen und neu zusammensetzen 

- Normale Aufgaben

->lasse loesen
# Aufgabe 1
x = 4
y = 3
ncols = 8

Bespreche ausfuehrlich die Loesungen.

def ceil(x):
    return int(x)


def ceil(x):
    return int(x)

---
Nicht Listen aendern ueber die man iteriert!

xs = [1, 2, 3]
ys = []

for x in xs:
    ys.append(x)

    if x == 1:
        xs.remove(x)
    

Was ist nun xs, ys ???
xs, ys
# scheint ueber den Index iteriert zu werden.


Listen/Listcomprehension
Platzhalterstrings mit Formatierung

def xy2idx(x, y, ncols):
    return y*ncols + x


def idx2xy(idx, ncols):
    x = idx % ncols
    y = idx // ncols
    return x, y

table = [[0] * ncols for _ in range(nrows)]
table

table = []
for _ in range(nrows):
    row = [0] * ncols
    table.append(row)


for i in range(ncols*nrows):
    x, y = idx2xy(i, ncols)
    table[y][x] = i
table

fmt='{:>2}'
for i in range(ncols*nrows):
    x, y = idx2xy(i, ncols)
    table[y][x] = fmt.format(i)
table


lines = [' '.join(table[i]) for i in range(nrows)]
lines

s = '\n'.join(lines)
print(s)
-------

# review sorted

# sortiere nach Absolutwert
numbers = [-3, 2, -1, 5]
sorted(numbers, key=lambda x: abs(x))

WICHTIG
#  Was passiert hier und wieso?
sorted(numbers, key=lambda x: x)

# sortiere nach Rang
name_rang = [('Bob, 1), ('Alice', 2), (Cathy', 3)]
sorted(numbers, key=lambda x: x[1])

---------
Funktionen mit Default-Argumenten
Funktionsaufruf: auspacken von Tuple (Positional Arguments)
Funktionsaufruf: auspacken von Dictionaries (Key-Word Arguments)
---------
Files, strip, split
---------

Nachbesprechung Uebungen L09, falls gewuenscht

------
Steuerung von Automaten, bez. Steuerung eines Geraetes mit einem Automaten.

Beispiel 3d-Drucker. 
Der Drucker wird mittels sog. g-Codes gesteuert.
Im Prinzip koennte man diese g-Codes direkt selber eingeben.
Hat jedoch Software, die zu einem 3d-Model eines Objekts das entsprechende g-Code Programm generiert.

Modelliert Automat als abstrakte Maschine.
Automat kann nur einzelne Symbole lesen,
ev. Zustand wechseln und Symbol ausgeben.

Automat operiert in Umgebung, koennen Ausgabezeichen als Befehl interpretieren,
der an das zu steuernde Geraet weitergeleitet wird.

Zeichne Kaffeeautomat.

%load_ext tikzmagic

%%tikz -f svg -l automata,positioning
\begin{tikzpicture}[shorten >=1pt, node distance=3cm, bend angle=10, baseline=0pt]
  \node[scale=3] at (2, 3) {Kaffeeautomat};

  \node[state,initial, initial text=]  (q_0) {$0$};
  \node[state]          (q_1) [right=of q_0] {$1$};
  \draw(8, 0);

  \path[->] (q_0) edge[bend left] node[above] {\begin{tabular}{c}Geld einwerfen/ \\ ready\end{tabular}} (q_1)
            (q_1) edge[bend left] node[below] {\begin{tabular}{c}dr\"ucke Knopf/ \\ Kaffee\end{tabular}} (q_0);

\end{tikzpicture}

->Automaten

-> Zeichnungsrobotor I
   kurze Zeichnungsaufgabenm
T:

word = 'uG-50,0;dG0,75;'
automat.read(word) 

รท:
word = 'fblue;ug150,125;C10;g150,75;C10;'
automat.read(word)  


colors = ['red', 'blue', 'yellow', 'teal', 'orange', 'pink']
size = 25
fmt = 'f{color};R{size},{size};G{size},0;'
cmds = [fmt.format(color=color, size=size) for color in colors]
cmds

canvas.reset()
automat.read(''.join(cmds))

------
cmds = [
    'l12',
    'sblue',
    'g100,100',
    'dg200,100',
    'uG-50,0',
    'sred',
    'dG0,50',
]

eingabe = ';'.join(cmds) + ';'
eingabe

-> Zeichnungsrobotor II
   mit Python Programm fuer Zeichnungsroboter erstellen

Nachtrag zu Uebungen
Shorts:

-Listen
 flatten
 closest_to

-str
 merge_unmerg too hard
 zip(*words) trick is a bit tough

- set
  unque, a bit hard

-----------------
ev noch aus L11
Callbacks.ipynb
Output_Widget.ipynb
NIM_mit_Widgets.ipynb

Callback_Argument_fixieren.ipynb
Einige_Widgets.ipynb

CANVAS: Canvas_Intro.ipynb

n= 8
dw = canvas.width / n
dh = canvas.height / n
dw, dh

canvas.fill_rect(2*dw, 4*dh, dw, dh)

# draw circle

x = 71
y = 28

col = x // dw
row = y // dh
col, row

center = ((col+0.5)*dw, (row+0.5)*dh)
canvas.fill_circle(*center, dw/3)



def draw_chessboard(canvas, color1='grey', color2='blue'):
    n = 8  # 8x8 Brett
    canvas.fill_style = color1
    canvas.fill_rect(0, 0, canvas.width, canvas.height)

    # Zeichne (ungerade) Felder mit color2
    canvas.fill_style = color2

    # width und height eines Feldes
    dw = canvas.width / n
    dh = canvas.height / n

    for x in range(n):
        for y in range(n):
            # zeichen Feld falls x + y gerade
            if (x + y) % 2 == 0:
                canvas.fill_rect(x*dw, y*dh, dw, dh)


def draw_circle_in_field(x, y):
    canvas.fill_style = 'black'

    dw = canvas.width / n
    dh = canvas.height / n

    col = x // dw
    row = y // dh

    center = ((col+0.5)*dw, (row+0.5)*dh)
    canvas.fill_circle(*center, dw/3)