### Pr&uuml;fung vom 13. Januar 2025

**Allgemeines**
- Zeit: 90 Minuten.
- Hilfsmittel: Unterrichtunterlagen, Notizen, ...
- **Vorboten** ist die Kommunikation mit anderen Personen in jeglicher Form, Chat-GPT.

**Vorbereitung**
- Kopiere die Notebooks `Aufgaben1.ipynb` und `Aufgaben2.ipynb` und nenne sie dann `Aufgaben1_<Vorname>_<Nachname>.ipynb`
  und  `Aufgaben2_<Vorname>_<Nachname>.ipynb`. L&ouml;se die Aufgaben in den kopierten Notebooks.

**Allgemeine Hinweise**
- Bei manchen Aufgaben ist eine Funktion zu programmieren, die sp&auml;ter verwendet wird. 
Falls deine Funktion nicht wie gew&uuml;nscht funktioniert, kannst du 
statt dessen die gleichnamige Funktion aus dem Modul `loesungen` verwenden. 
- Teste den Code mit den Beispielen aus der Aufgabenstellung.
- Ist die Implementation einer Funktion verlangen,
so schreibe zuerst Code, der das Problem l&ouml;st.
Der sp&auml;tere R&uuml;ckgabewert der Funktion ist in einer 
Variable (z.B. `result`) zu speichern und am Ende der Zelle auszugeben.

**Abgabe**
- Kopiere die Notebooks mit deinen L&ouml;sungen in deinen `share`-Ordner.  
  F&uuml;hre dann in einer Code-Zelle den Befehl `!sync_share` aus, oder 
  f&uuml;hre im Jupyterlab-Terminal den Befehl `sync_share` aus.  
  Falls das nicht klappen sollte: Schicke die Notebooks mit deinen L&ouml;sungen per Email an `dieter.probst@edu.teko.ch`.


**Viel Erfolg!**



Liebe Studierende,

am Montag findet der Unterricht vor Ort statt (18:00 - 21:15, Zimmer 05).
Zuerst schreiben wir die Pruefung (90 Minuten).

Im Anschluss werfen wir einen Blick auf das Canvas-Widget 
(https://ipycanvas.readthedocs.io/en/latest/basic_usage.html).
Dieses Widget ermoeglicht es, auf eine Leinwand zu zeichnen.
Weiter beobachtet das Canvas-Widget Ereignisse wie Mausklicks und Tastendruecke und ermoeglicht es dem Benutzer
darauf zu reagieren.
Dies erlaubt z.B. die interaktive Steuerung eines Spiels.


Beste Gruesse und ein schoenes WE,
Dieter


Pruefung, mache sie einfacher

next: canvas, multicanvas, ohne callbacks

Klassen(just the very very basics!)
Hanoi ohne Controller

Output Widget
Canvas Events
Drawing App
Hanoi-Controller

01 Intro, Docker und Jupyterlab Installieren
02 Syntax und Semantik-Fehler, Variabeln Funktionen, Minipython mit For
03 Basic Types, if-then-else
04 Module While-Loops
05 break und continue, Platzhalterstrings
06 Methods, Listen Listen mit Listen
07 enum, zip, sorted, Files, Listcomp, Sets
08 Dicts, if expressions any, all
09 Dict, Sortieralgos 16.12


10 Repetition. 06.1. Automat 9.12
11 Test, 13.1. Klassen, 
12 Callbacks, 20.1
13 Games, Projektarbeit infos, Themen fixieren. 27.1.


14 PA 17.2.
15 PA 24.2
16 PA 3.3
17 Projektvorstellung 10.3.
18 Abschluss/ Feedback Projektarbeiten. 17.3

Canvas_Intro

Uebe zu zeichnen, z.B. Flaggen 
-> Draw_Flags, mit code in draw_flags.py

import draw_flags

draw_flags.draw_CH_flag(canvas, (10, 10), 80)
draw_flags.draw_BRD_flag(canvas, (110, 10), 80)
draw_flags.draw_BE_flag(canvas, (210, 10), 80)

MultiCanvas_Intro

from Canvas_Aufgaben_A import draw_circle
draw_circle(fg, *position.values(), color='red')



Widgets:
- Callbackss
- Output: gebrauch des Outputwidgets
- Argument-Fixieren
- Einige Widgets
- NIM mit Widgets

Canvas-Widget