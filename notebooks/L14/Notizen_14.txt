================================================
01 Intro, Docker und Jupyterlab Installieren
02 Syntax und Semantik-Fehler, Variabeln Funktionen, Minipython mit For
03 Basic Types, if-then-else
04 Module While-Loops
05 break und continue, Platzhalterstrings
06 Methods, Listen Listen mit Listen
07 enum, zip, sorted, Files, Listcomp, Sets
08 Dicts, if expressions any, all
09 Dict, Sortieralgos 16.12


10 Repetition. 06.1. Automat 9.12
11 Test, 13.1. Klassen, 
12 Callbacks, 20.1
13 Games, Projektarbeit infos, Themen fixieren. 27.1.


14 PA 17.2.
15 PA 24.2
16 PA 3.3
17 Projektvorstellung 10.3.
18 Abschluss/ Feedback Projektarbeiten. 17.3





Tiago: git submodule geloescht!

Hi Tiago,
du hast in deinem share Ordner den Unterordner response geloescht.

Das war ein git submodule.
Mit folgenden Befehlen im Jupyterlab Terminal 
kannst du es wieder erstellen:

initials='tf'
submodule="response_${initials}"
root="${HOME}/work"
share_dir="${root}/share_${initials}"
owner='dpro-prog2425zh'
token=$(cat "$root/.token_share")
git -C "$share_dir" submodule add --force "https://${owner}:${token}@github.com/${owner}/${submodule}.git" response

==============================
zeige beispiele zum
verschieben und greifen von spielsteinen.

zeige text view und text controller
zeige test nimm
zeige guess number mit Intslider
==================================

Wer macht welches Projekt?
Jeder gibt kurz Auskunft. Werden dann zu zweit weiteres Vorgehen noch genauer besprechen.

Muster zeigen. 
Starten mit einer Spielklasse, die nur
Spiellogik implementiert.

Fuegen Controller (steuerung) und View hinzu.

Sokoban:
- ev. schno mehr als Prototyp.
- ev. noch nicht als Klasse 
  zuerts einfach Code.
  Dann als Klasse, ev. mit etwas Hilfe von mir.

Bewusst noch keine graphische View.
Empfehle mit testversion zu startet, dann graphische View.

Sokoban.ipynb (sokoban.py enthaelt gleicher Code)
Habe Codezelle in dieses File geschreiben.

- Spielzustand representation zuerst.
  Konstanten, damit rasch Darstellung geaendert werden kann!

Klasse Game und Klasse View/Controller
Klasse Game ruft nach jeder Aktion eine Funktion event_handler(event, data) auf,
welche sich um die Darstellung dieser Aktion, bez. Spielzustand nach dieser Aktion, kuemmert.


Controller_for_Mockview:
- Klasse Game anschauen
  koennen so eine Gameklasse zum spielen nutzen.
  Muessen aber alle Methoden von Hand aufrufen.
  game.new_game()
  game.move(move)

Aufgabe des Kontrollers:
Kommande entgegennehmen und an Spielklasse weitergeben.
Hier: Canvaswidget hoert auf Tastendruecke.

      so organisiert, dass ein einzelner Tastendrueck
      eine Befehl ausloest.
      ev. Tasten in Buffer schreiben, und wenn Befehl vollstaenig oder Enter gedrueckt wird,
      Befehl weiterleiten.
      Spaeter dann mit Maus und Tastatur.


Anhand beispiel. 
Wie sieht ein einfacher Prototyp aus?
Wie koennen wir rasch einen provisorichen Controller mit View schreiben?


Beispiel: Sokoban
https://www.mathsisfun.com/games/sokoban.html


Controller_for_Mock_Game
Controller, ohne view.
Brauchen trick, um Spielzustand auszugeben, keine View!
Rufen wir die move Methode mit game.move auf, erfolgt keine Darstellung.


View_for_Mock_Game
- View ganz einfach, aber schon hilfreich, da 
  Output an einem Ort bleibt.