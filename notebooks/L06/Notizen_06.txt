01
02
03
04
05 For, While Platzhalterstrings
06 Methods, enum, zip
07 Automaton 16.12.
08 Dicts, Files sorting
09 Class,  16.12.

10 Repetition. 06.1.
11 Test, 13.1. Canvas, Widgets
12 Callbacks
13 Games, Projectarbeit infos, Themen fixieren.

14 PA 17.2.
15 PA
16 PA
17 Projectvorstellung
18

Damit Bilder gefunden werden: send via chat
/home/studi/work$ ln -s .src/images images

Aufraeumen: Verschiebe was wir behandelt haben nach L05
dann update 6, overwrite y

Letztes Mal: 
- range, slicenotation, Platzhalterstings und Formatierungsspezifikationen
- While-Loop, 
-----
Plan:
Variablen speichern keine Werte, sondern die Speicheradresse eines Objekts.
Typen und ihre Methoden, Typen sind eigentlich Klassen.
Kontrollfragen 5
 skip while 2. Teil
Errors
Unpacking II, var-funktions

Variabeln, Python-Tutor
+=
Typen und Methoden
Listen mit Listen
enum_zip

Kontrollfragen 6
Stringmethoden, Listenmethoden (Codebeispiele)
==============
Start:

fmt = 'x={}, y={}'
str.format(fmt, 2, 3)

fmt.format(2, 3)


Kontrollfragen_05A
  range, slice, Platzhalter
  einige Standardprobleme mit Funktionen programmieren, 
  maxlen fuer  Ausgabe der Tabelle in 10) benoetigt.

1) len(range(...) # 11, replace empy slots in slices by 0 11
2) s[start:stop:step]
4) bruch = str.format('{}/{}', 3, 7)
   bruch

   fstring = '{} = {}'
   str.format(fstring, bruch, 3/7)

   fstring = '{:<4} = {:6.3f}'
5) maxlen, hilfsfunktion fuer weitere AUfgaben.
6) einfaches Bsp. zu continue
7,8,9) find_first, find_al, replace: ganz typische Aufgaben 
       7) fuer break
9) unklar gestellt.
10) wie Breit ist 1.Spalte mit Namen? laenger Namen +3

For und While, Aufgabe:
========================================


# Codes. 0: richtig, 1: zu gross, -1: zu klein 
comments = ['richtig', 'zu gross', 'zu klein']
comments[-1]

copy from L05_functions
def eval_guess(guess, secret):
    if guess == secret:
        return (True, 0)
    if guess < secret:
        return (False, -1)
    if guess > secret:
       return (False, 1)

secret = 3
guess = 1
ok, i = eval_guess(guess, secret)
ok, comments[i]

# aufgerufen mit falschem guess mit eval (1, -1)
def next_guess(guess, evaluation, lower, upper):
    # neue Grenzen bestimmen
    if evaluation == 1:  # zu gross
        upper = guess - 1
    else: # zu klein
        lower = guess + 1
    # neuer Guess in der Mitte von lower und upper
    n = (lower + upper) // 2
    return n, lower, upper

lower, upper = 0, 10
secret = 4
guess = 7
e = 1  # guess zu gross

guess, lower, upper = next_guess(guess, e, lower, upper)
ok, e = eval_guess(guess, secret)

str.format('guess={}, eval={}, lower={}, upper={}',
           guess, comments[e], lower, upper)


---
lower, upper = 0, 10
secret = 4
guess = (lower + upper) // 2
attempts = 0

while True:
    attempts = attempts + 1
    ok, e = eval_guess(guess, secret)
    msg = str.format('{} ist {}', guess, comments[e])
    print(msg)
    if ok:
        print('Versuche:', attempts)
        break
    guess, lower, upper = next_guess(guess, e, lower, upper)


Errors_und_Exceptions
=====================

Fehler ausloesen: Fehlermeldung ausgegen, Programmausfuehrung sofort beenden.
Wieso: schlimmeres verhindern: undefiniertes Verhalten, versteckte Fehler.
Kann Fehler abfaangen und behandeln. Ev. spaeter.
im Moment: 'let it crash!' als Fehlerbehandlungsmethode.

raise TypeError('String als Argument erwartet')
raise Exception('etwas ging schief')

Der Unpacking-Operator *, Teil II, variadic Functions Coding range by hand 
=========================

Wie selber eine Funktion wie print schreiben, die 
variable Anzahl von Argumenten nimmt.

def f(*args):
    print('Anzahl Argumente: {}'.format(len(args)))
    print(*args)

def f(*args, x):
    print('Anzahl Argumente: {}'.format(len(args)))
    print(*args)
    print(x)


Funktion wie range:
f(stop)
f(start,stop)
f(start, stop, step)

def f(*args):
    start = 0
    step = 1
    if len(args) == 1:
        stop, = args
    elif len(args) == 2:
        ...
    elif len(args) == 3:  
        ...
    else:
        raise Exception('at most 3 arguments expected')
    # Ausgabe von start, stop, step
Notebook: 
Eigene Implementation der range Funktion:


Variabeln, Objekte, Referenzen
Gehe langsam gemeinsam durch, 
Listenrefs auf Pythontutor.

plus_gleich
-----------

Type_Methoden
read Docstring of str.join: 

s = ' und '
words = ['Haus', 'Hof', 'Kind']
s.join(words)

s = 'foo'
len(s)

str.__len__(s)

t = 'bar'
s + t

str.__add__(s, t)

The string whose method is called ...

ask ChatGPT: 
Ich lerne Python.
Kannst du mir anhand eines Beispiels die Stringmethode '' erklaeren.

Tiago: join
Eric: split
Antonio: strip, lstrip, rstrip
Mike: find and index
Marko: replace
====================


list.append()
numbers = [1,2,3]
numbers.append(4)
numbers

numbers.pop()

liste_mit_listen
================

enumerate und zip und for/while else

word = 'abc'
enumerate(word)

tuple(enumerate(word))

nbrs = (1, 2, 3)
zip(numbers, word)

tuple(zip(numbers, word))

n = 3
for i in range(3):
    print(i)
    if i == n:
        break
else:
    print('Schleife wurde  NICHT vorzeitig verlassen')

n = 2

i = 0
while i < 3:
    print(i)
    if i == n:
        break
    i = i + 1
else:
    print('Schleife wurde  NICHT vorzeitig verlassen')

Loesung Aufg 2

s = 'abcdefgh'
n = len(s)
list(zip(s, range(n)))

def find_all(word, char):
    indices = ()
    i = -1
    for c in word:
        i = i + 1
        if c != char:
            continue
        indices = indices + (i,)
    return indices

def find_all(word, char):
    indices = ()
    for i, c in enumerate(word):
        if c != char:
            continue
        indices = indices + (i,)
    return indices

def find_all(word, char):
    indices = ()
    i = -1
    for c in word:
        i = i + 1
        if c != char:
            continue
        indices = indices + (i,)
    return indices

def find_all(word, char):
    indices = ()
    for i, c in enumerate(word):
        if c != char:
            continue
        indices = indices + (i,)
    return indices

Cheatsheet
  eigene Implementationen einiger Stringmethoden
  eigene Implementationen einiger Listmethoden



Kontrollfragen_06
1) Copy: deep or shallow. deep is im allg. schwierig.
         copy is shallow copy

nbrs = [1, 2, 3]
x = [nbrs]
y = x.copy()

x is y, x == y
x[0] is y[0]

x[0][0] = 10
y[0][1] = 20
x, y

# visualize on python tutor

2,3) Frage mit Listen: 
     wird Liste modifiziert?
     wird neue Liste zurueckgegeben?

   wie x = x + y, x += y
   
4, 5) same thing, Listen vs Tuple
6, 7) split, join, strip, (rstrip, lstrip)
8) zip, Fehler ausloesen,


notebookfinder