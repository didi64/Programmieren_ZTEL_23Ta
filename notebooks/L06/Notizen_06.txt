01
02
03
04
05 For, While Platzhalterstrings
06 Methods, enum, zip
07 Dicts, Files List.comp.
08 sorting
09 Class, Automaton 16.12.

10 Repetition. 06.1.
11 Test, 13.1. Canvas, Widgets
12 Callbacks
13 Games, Projectarbeit infos, Themen fixieren.

14 PA 17.2.
15 PA
16 PA
17 Projectvorstellung
18




Aufraeumen: Verschiebe was wir behandelt haben nach L04 
dann update 5, overwrite y

Letztes Mal: 
- range, slicenotation, Platzhalterstings und Formatierungsspezifikationen
- While-Loop, 
 
Loesungen
fstring = '|{}|{:5.1f}0|'

Kontrollfragen_05A
range, slice, Platzhalter
einige Standardprobleme mit Funktionen programmieren, 
maxlen fuer  Ausgabe der Tabelle in 10) benoetigt.

For und While schleifen bis for Aufgabe:
========================================

def eval_guess(guess, secret):
    '''returns a tuple (ok, i),
       ok is guess == secret, and i is -1,0 or 1 depending on whether
       guess is too small, correct or too big
       guess: int
       secret: int
    '''
    if guess == secret:
        return (True, 0)
    if guess < secret:
        return (False, -1)
    if guess > secret:
       return (False, 1)

Trick:
comments = ['richtig', 'zu gross', 'zu klein']
comments[-1]

secret = 3
guess = 1
comments = ['richtig', 'zu gross', 'zu klein']
ok, i = eval_guess(guess, secret)
ok, comments[i]


def next_guess(guess, evaluation, lower, upper):
    # neue Grenzen bestimmen
    if evaluation == 1:
        upper = guess - 1
    else:
        lower = guess + 1
    # neuer Guess in der Mitte von lower und upper
    n = (lower + upper) // 2
    return n, lower, upper

lower, upper = 0, 10
secret = 4
guess = 7
e = 1  # guess zu gross

guess, lower, upper = next_guess(guess, e, lower, upper)
ok, e = eval_guess(guess, secret)

str.format('guess={}, eval={}, lower={}, upper={}',
           guess, comments[e], lower, upper)


---
lower, upper = 0, 10
secret = 4
guess = (lower + upper) // 2
attempts = 0

while True:
    attempts = attempts + 1
    ok, e = eval_guess(guess, secret)
    msg = str.format('{} ist {}', guess, comments[e])
    print(msg)
    if ok:
        print('Versuche:', attempts)
        break
    guess, lower, upper = next_guess(guess, e, lower, upper)


Kontrollfragen_05A

Der Unpacking-Operator *, Teil II, variadic Functions Coding range by hand 
=========================

def f(*args):
    print('Anzahl Argumente: {}'.format(len(arg)))
    print(*args)

Eigene Implementation der range Funktion:
def f(*args):
    start = 0
    step = 1
    if len(args) == 1:
        stop, = args
    elif len(args) == 2:
        ...
    elif len(args) == 3:  
        ...
    else:
        raise Exception('at most 3 arguments expected')

Notebook: erklaere bereits
Eigene Implementation der range Funktion:
