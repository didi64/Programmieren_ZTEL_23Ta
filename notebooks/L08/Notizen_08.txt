01 Intro, Docker und Jupyterlab Installieren
02 Syntax und Semantik-Fehler, Variabeln Funktionen, Minipython mit For
03 Basic Types, if-then-else
04 Module While-Loops
05 break und continue, Platzhalterstrings
06 Methods, Listen Listen mit Listen
07 enum, zip, sorted, Files, Listcomp, Sets
08 Dicts, if expressions any, all
09 Canvas, Callbacks, Widgets 16.12, Automat 9.12


10 Repetition. 06.1.
11 Test, 13.1. Klassen, 
12 Callbacks, 20.1
13 Games, Projectarbeit infos, Themen fixieren. 27.1.


14 PA 17.2.
15 PA 24.2
16 PA 3.3
17 Projektvorstellung 10.3.
18 Abschluss/ Feedback Projektarbeiten. 17.3

Letztes Mal: 
Listcomprehesion und Files
ohne Kontrollfragen 6,7, ohne Mengen und sorted.

Heute:
Kontrollfragen_06a, 07A
--
Mengen, sorted
Dictionaries
Fallunterscheidung
reversed, if-else-Ausdruecke

Ortschaften_CH08
Cards

Ternary Ausdruecke, any und all -> Cheatsheet.
x = 1 if 'x' in word else -1

Kontrollfragen

Dictionaries
--------------------


Kontrollfragen_06A: Inhaltliche Repetition:

1) Liste kopieren

xs = list(range(5)) #  Frage Plenum? 3 gute Antworten
ys = xs # kein Kopie!

ys.clear()
xs

xs = list(range(5))
ys = xs[:]
ys.clear()
xs

zs = xs.copy()
ws = [x for x in xs]


2)
str.upper('foo')
'foo'.upper()

words = ['foo', 'bar', 'baz']
[w.capitalize() for w in words]
[w.upper() for i, w in enumerate(words) if i != 1]


tuple(enumerate(words))

3) Liste words aendern:
for i, w in enumerate(words):
    words[i]=w[::-1]
words

4) # Listen +=,  +
words += ['asdf', 'aga']
words

words + ['asdf', 'aga']
words

words.extend(['asdf', 'aga'])
words

6,7) 
Die Stringmethoden split und joine
genau 1 Leerzeichen zw. Worten und nirgends sonst!
s = [' asdf  df asdfas  asf  asfasdf  ']
# s.split()
' '.join(s.split())
--------------------------------------------------------
Kontrollfragen_07A Inhaltlich,
max, laengste Woerter
2) # erstelle Liste mit den Woertern dieser Laenge
[len(word) for word in words]

max_len = max(len(word) for word in words)
# laengste Woerter
[word for word in words if len(word) == max_len]

3) # Tabellenheader using join.
i=4
'{}-Mal'.format(i)

['{}-Mal'.format(i) for i in range(1, 10)]
header = ','.join('{}-Mal'.format(str(i)) for i in range(1, 10))

4) kommaseparierte Liste mit Werten
[i for i in range(1, 10)]
','.join(i for i in range(1, 10))  # Muss keine Liste machen Iterator tuts auch
                                   # was geht schief, wie korrigieren?

[str(i*7) for i in range(1, 10)]
','.join(str(i*7) for i in range(1, 10))

def make_row(n):
    return ','.join(str(i*n) for i in range(1, 10))

rows = [make_row(n) for n in range(2, 10)]

# tabelle: Heder hinzufuegen, Zeilen um \n ergaenzen
table = [row + '\n' for row in [header] + rows]

# File lesen und schreiben

fn = 'mult_table.csv'
with open(fn, 'w') as f:
    f.writelines(table)

--
with open(fn, 'r') as f:
    lines = [line.strip() for line in f]

# Tabelle formatiert ausgeben: 
# 
line = lines[7]
line
items = line.split(',')
items
len(items)

fmt = '{:>6}' * 9
fmt

header = fmt.format(*lines[0].split(','))
print(header)

for line in lines[1:]:
    print(fmt.format(*line.split(',')))
---------------------------------------------------------------------
Was nicht gemacht letztes Mal Mengen und wie sortiere mit
eigenem Sortierkriterium! Lambas
--------
Mengen:
xs = (1, 2, 3)
ys = (3, 4, 5)
set(xs) | set(ys)  # Verein
set(xs) & set(ys)  # Schnitt

sorted: key

Ab Personen Beispiel:
lambdas:
square = lambda x: x*x

Fuer Aufgabe: kopiere scrabble.py in den Ordner Modules
from scrabble import buchstabenwert
buchstabenwert('a')
buchstabenwert('A')

def wortwert(word):
    return sum(buchstabenwert(c) for c in word)
wortwert('hallo')

words = ['foo', 'bar', 'baz']
ww = [wortwert(w) for w in words]
ww

words = ['foo', 'bar', 'baza']
sorted(words, key=wortwert, reverse=True)
sorted(words, key=lamba x: (wortwert(x), x), reverse=True)
============

7 Listcomprehesion
Lead with:
Pokerhand: Was ist es? pair, pairs, trips, quad, fullhouse

cards = ['6H', 'KH']

SUITS = 'HSDC' # hearts, spades diamond, clubs
VALUES = '23456789TJQKA'

deck = [value+suit for suit in SUITS for value in VALUES]
deck[-13:]

hand = [deck.pop() for _ in range(5)]
hand

def new_deck():
    return [value+suit for suit in SUITS for value in VALUES]

def draw(deck, n=5):
    return [deck.pop() for _ in range(5)]

draw(deck)

import random

items = [1,2,3,4,5]

random.shouffle(items)
items

RANK=0
SUIT = 1

[card[RANK] for card in hand]
[card[SUIT] for card in hand]
-------------------











====================
Ortschaften_CH_L8, Hauptsaechlich wie mit File/grossem Datansatz arbeiten

Brauche auch diese str-Methoden
str.isalpha()
str.isupper()
str.count()

any-all

xs = [2, 4, 6, 7]
any(x % 2 == 1 for x in xs)

braucht bereits Dictionaries, aber nur Folgendes:

from kz_kt import d
list(d)
for k in d:
    print(k)
d['BE']

Ortschaftsnamen:
- behalte nur echte Ortschaften,
- entferne Kantonskuerzel und Gemeinde/Kantonsnamen aus Ortsnamen.

Verweise auf orte_helpers.py 
Gehe dann gemeinsam durch Notebook Ortschaften_CH_L8

Dictionaries
=============

if-else-Ausdruecke, reversed:
kleine Nachtraege, aufgenommen ins Cheatcheat, ebenso wie any, all



gemeinsam cards.py analysieren;
Zweck: Funktionen bereitstellen um Karten aus gemischtem Deck zu ziehen,
erkennen was fuer eine Pokerhand gezogen wurde,
Zufallsexperiment durchfuhren und zaehlen, wie haeufig die einzelnen Haende sind.

Gehe kurz durch Cards.ipynb



>imports und Konstanten definieren
>Diskutiere alle Variabeln, ihren Typ unz Zweck

import random


VALUE = 0
SUIT = 1
SUITS = '♥♠♦♣'
VALUES = ('2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A')

VALUE_RANK = {v: i for i, v in enumerate(VALUES)}
RANK_VALUE = {v: k for k, v in VALUE_RANK.items()}

STRAIGHTS = ('2345A',) + tuple(''.join(VALUES[i:i+5]) for i in range(9))
HANDTYPES = ['11111', '2111', '221', '311', 'straight',
             'flush', '32', '41', 'straightflush']
HANDTYPE_RANK = {t: i for i, t in enumerate(HANDTYPES)}

HANDNAMES = ['high card', 'one pair', 'two pairs', 'triple', 'straight',
             'flush', 'fullhouse', 'four of a kind', 'straightflush']
HANDTYPE_NAME = dict(zip(HANDTYPES, HANDNAMES))
--
stelle einfache Befehle/Funktionen bereit um
Karten zu ziehen -> Hand
Hand zu analysieren. Was haben wir gezogen? Fullhouse, 2 Pairs, ...

def new_deck(shuffle=True):
    deck = [value+suit for suit in SUITS for value in VALUES]
    if shuffle:
        random.shuffle(deck)
    return deck


def draw(deck, n=1):
    n = min(n, len(deck))
    cards = tuple(deck.pop() for _ in range(n))
    return cards


def get_values(hand):
    values = [card[VALUE] for card in hand]
    return values


def get_suits(hand):
    suits = [card[SUIT] for card in hand]
    return suits
----

def is_flush(hand):
    return len(set(get_suits(hand))) == 1


def is_straight(hand):
    values = get_values(hand)
    values = sorted(values, key=lambda x: VALUES.index(x))
    return ''.join(values) in STRAIGHTS

------

def vals2ranks(vals):
    return tuple(VALUE_RANK[v] for v in vals)


def count_dict(items):
    d = {}
    for item in items:
        d[item] = d.get(item, 0) + 1
    return d


def sort_ranks(ranks):
    cd = count_dict(ranks)
    return sorted(ranks, key=lambda x: (cd[x], x), reverse=True)

-------------
def handtype(hand):
    sf = 'straight' * is_straight(hand) + 'flush' * is_flush(hand)
    if sf:
        return sf

    values = get_values(hand)
    counts = count_dict(values).values()
    counts = sorted(counts, reverse=True)
    return ''.join(str(x) for x in counts)


def handrank(hand):
    t = handtype(hand)
    return HANDTYPE_RANK[t]


def handname(hand):
    t = handtype(hand)
    return HANDTYPE_NAME[t]
-----------------
def tiebreaker(hand):
    ranks = vals2ranks(get_values(hand))
    return sort_ranks(ranks)


def rank_hands(hand1, hand2):
    v1, v2 = ((handrank(h), tiebreaker(h)) for h in (hand1, hand2))
    if v1 > v2:
        return 1
    elif v1 == v2:
        return 0
    else:
        return -1
-----------------

