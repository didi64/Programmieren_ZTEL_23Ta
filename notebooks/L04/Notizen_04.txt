Mache Gruppen:
Marco + Steve
Mike + Eric
Antonio
=============
Tiago 
Jean?



Weiter mit Lektion3: While, Module, NIM, Kontrollfragen03A

Repetition:
Typen:
int, float, str, bool, tuple, list

- nur Liste ist modifizierbar!
- str, tuple und list in iteralbe, 
  kann mit For-Loop darueber iterieren.
  die Funktion len liefert die Laenge, Anzahl Elemente
- kann mit items[i] auf das ite Element zugreifen.
  kann sogar teilliste herausgreifen (slicing, spaeter).

notizen.ipynb
Guess number, Vorschau While


While: potentialle Endloschleifen!
Synopsis While:
i = 0
n = 3

while i < n:
    print(i)
    i = i + 1  # wichtig, sonst endlos Schleife

while True:
    print(i)
    i = i + 1
    if i >= n:
        break

done = False
while not done:
    print(i)
    i = i + 1
    if i >= n:
        done = True


While
=====
while: Loesungen
# direkte Bedingung

x = random.randint(1, 10)
y = random.randint(1, 10)
question = 'Wieviel ist ' + str(x) + ' Mal ' + str(y) + '?'
z = int(input(question))

while x * y != z:
    print('falsch')
    z = int(input(question))
print('korrekt')

# Hilfsvariable

x = random.randint(1, 10)
y = random.randint(1, 10)
question = 'Wieviel ist ' + str(x) + ' Mal ' + str(y) + '?'
done = False

while not done:
    z = int(input(question))
    if z == x * y:
        print('korrekt')
        done = True
    else:
        print('falsch')

# Ausbrechen

x = random.randint(1, 10)
y = random.randint(1, 10)
question = 'Wieviel ist ' + str(x) + ' Mal ' + str(y) + '?'

while True:
    z = int(input(question))
    if z == x * y:
        break
    print('falsch')
print('korrekt')    

Module
======
Vorschau:

%%file mythings.py
PIN = 123

%%writefile -a
def length(s):
    '''gibt die Laenge des Wortes s zurueck
       s: str
    '''
    i = 0
    for _ in s:
        i = i + 1
    return i

%reset -f --aggressive
import mythings
mythings.PIN
mythings.length('hallo')

mythings.__file__

import sys
sys.path

%load $students.__file__

Copy to modules Folder.
------
Sammle Funktionen in Modul myfunctions.py aus
L02/ Funktionen_schreiben, Kontrollfragen_02A

fuege DOcStrings ein
importiere und teste die Funktionen!
-----

Wir wollen als naechstes ein einfaches Spiel programmieren.
Gegeben sind Haufen mit Steinen.
- 2 Spieler entfernen abwechselnd ein oder mehrere Steine von einem der Haufen.
- Wer den letzten Haufen abr&auml;umt hat gewonnen.

Schreiben 3 Funktionen, speichere diese in nim.py ab.
Marco + Steve: ask_for_move
Mike+Eric: show
Antonio: count

Module (gemeinsam)

Schreiben 3 Funktionen, speichere diese in nim.py ab.
Marco + Steve: ask_for_move
Mike+Eric: show
Antonio: count


Frage nach Zug:
def ask_for_move():
    '''fragt von welchem Haufer  wieviele Steine
       weggenommen werden sollen
       gibt ein Tuple move = (Haufen, Anzahl Steine zurueck)
    '''
    heap = input('Von welchem Haufen?')
    n = input('Wieviele?')
    move = (int(heap) - 1, int(n))
    return move

heaps = [3, 4, 5, 6]

def show(heaps):
    '''heaps: list (Liste mit Anzahl Steinen)
       stellt die Anzahl Steine textlich dar
       z.B. heap([2, 1, 4]) gibt Folgendes aus:
       1) **
       2) *
       3) ****
    '''
    i = 0
    for head in heaps:
        i = i + 1
        line = '*' * head
        mark = str(i) + ') '
        print(mark + line)

def count(heaps):
    '''gibt die Summe der Listenelemente von heaps
       zuruck
       heaps: list[int]
    '''
    tot = 0
    for heap in heaps:
        tot = tot + heap
    return tot

erstelle File nim.py mit diesen 3 Funktionen

NIM

range
=====
range(3)
tuple(range(3))
for i in range(3):
    print(i)

Loesungen:
nbrs = (1, 5, 9)
sum(nbrs)

even_nbrs = tuple(range(2, 101, 2))
sum(even_nbrs)

odd_nbrs = tuple(range(1, 100, 2))
sum(odd_nbrs)

def total(numbers):
    tot = 0
    for n in numbers:
        tot = tot + n
    return tot

total(even_nbrs)
total(odd_nbrs)

Indexing und Slicing.
====================
ung_words = []
for word in words:
    if word[-3:] == 'ung':
        ung_words = ung_words + [word]
ung_words

Format und Platzhalter, str.format
==================================
fstring = 'Artikel: {}, Preis {}'
str.format(fstring, 'Velo', 1999.99)

str. + tab vom Typ str bereitgestelletn Funktionen/Methoden.
str.format verhaelet sich genau wie eine Funktion aus sagen wir einem Modul str

Fuege Format-Spezifikationen hinau :<10 :5.2f

->schaue Notebook an

Loesungen
fstring = '|{}|{:5.1f}0|'

Der Unpacking-Operator *, Tabelle formatiert ausgeben, variadic Functions
=========================

print(1, 2, 3)

args = (1, 2, 3)
print(args) # Tuple ausgeben
print(*args)  #auspacken


Kontrollfragen:



