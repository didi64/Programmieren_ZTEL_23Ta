Analyse this code
Mike:
   encoded = [
        rot13[char.lower()].upper() if char.isupper() else rot13[char]
        if char.lower() in rot13
        else char
        for char in klartext
    ]

Marko: use dict
def rot13(char):
    return chr(((ord(char) - ord('a') + 13) % 26) + ord('a'))

Alfonso + Eric

def count_dict(numbers):
    return {num: numbers.count(num) for num in set(numbers)}

ok aber nicht effizient!
------------
Tiago: git submodule geloescht!

Hi Tiago,
du hast in deinem share Ordner den Unterordner response geloescht.

Das war ein git submodule.
Mit folgenden Befehlen im Jupyterlab Terminal 
kannst du es wieder erstellen:

initials='tf'
submodule="response_${initials}"
root="${HOME}/work"
share_dir="${root}/share_${initials}"
owner='dpro-prog2425zh'
token=$(cat "$root/.token_share")
git -C "$share_dir" submodule add --force "https://${owner}:${token}@github.com/${owner}/${submodule}.git" response

die andern:
sync_share, dann in Response nachschauen

===================================================
update 102 (Pruefung Loesungen)

vor update 
- (loesche Einige_Widgets, gibt ein neues solches File!)
  Marco canvas_helper.py (von L12) nach modules kopieren

update 13


loesche in Ordner moduls widget_helpers,
kopiere neues widget_helpers.py dorthin.

Einige_Widgets

- Output: alle Callbacks in Output-Widget umleiten, durch Dekoration!
- Text: zeige bei mir Deprecation Warning!
- Select: observe


anschauen und testen: Teste_Widgets
Neu: Text und Button (neben Canvas und MultiCanvas)

Klassen:
wird Blick auf Beispiele, erklaere Aufgaben,
gehe zurueck zu Klassen_Intro

Klassen: eigene Typen.
wie list, dict str.

Typ list ist Klasse.
a = str('foo')
a.upper()  # Methodenaufruf
str.upper(a)

bob = Student('bob')
bob.name

Instanzen haben eigene Attribute, Methoden sind allen Instanzen der Klasse gemein.

auch Canvas ist Klasse

Code strukturienen.
Klasse eigene Komponente, die sich testen laesst.

vgl. globale Variablen und Funktionen,
wird rasch unuebersichtlich.

Beispiele

Vector +, * Vergleiche mit Liste und str



Attribute: technisch auf Funktionen, im normalen Sprachgebrauch, Attribute und Methoden.

Nun Aufaben loesen lassen.

# Student
def get_grades(self):
    return {subject: sum(grades)/len(grades) for subject, grades in self.grades.items()}


# Hanoi
# in __init__
self.history = []
# in move_disk
self.history.append((src, dst))

# Vektoren
def __mul__(self, other):
    if isinstance(other, Vec2d):
        return self.x * other.x + self.y * other.y
    else:
        return Vec2d(other*self.x, other*self.y)

def norm(self):
    return (self*self) ** 0.5


===============================

Hanoi mit Klassen:

gehe nochmals zurueck zu Tuerme von Hanoi
Eine kleine Aenderung/Korrektur im Notebook von letzten Mal.

- event_handler noch einfacher: print um konsistent mit aktuellem Notebook zu sein
- Fehlerumleitun erst beim Controller, den Callbacks fuer die WIdgets noetig!
Nicht bei Funktion, die auf Canvas zeichnet!
(in gewissen Faellen geben Canvas Methoden keine Fehlermeldung, gibt nichts, das wir tun koennten!)

Klassen_mit_Hanoi_I
Game wie vorher, statt in File Code in Klasse untergebracht.
View: 

Aufgabe: View: Stackanimiert verschieben

import time


moves = [(0, 1), (0, 2), (1, 2), (0, 1), (2, 0), (2, 1), (0, 1),
         (0, 2), (1, 2), (1, 0), (2, 0), (1, 2), (0, 1), (0, 2), (1, 2)]


game.new_game()
for move in moves:
    game.move_disk(*move)
    time.sleep(0.5)

Klassen_mit_Hanoi_II

Controller
Extra zum Kontroller, callback direkt brauchen


File __init__.py markiert dieses Verzeichnis als Verzeichnis mit Modulen.

from Loesungen_13.View_mit_Controller import CanvasView


view = CanvasView(game)
view

Canvas_mit_Integriertem Kontroller
- add game
- add src


Kontroller erweitern:

from Loesungen_13.KeyMouseController import KeyMouseController


controller = KeyMouseController(game, view.canvas)
game.new_game()
controller



auch das geht

from controllers import KeyMouseController


controller = KeyMouseController(game, view.canvas)
controller

Run_Hanoi
Noch einen Textkontroller
